QQ 528371517
线上环境：
《1》设置 ESLint 检查代码格式
	eslint
	eslint-loader
	eslint-plugin-html : 在html文件中使用js时，用这个检测
	eslint-friendly-formatter : 报错的时候输出的格式
	
	配置ESlint
		webpack.config.js
		
		.eslintrc.*
		package.json
		
		
	ESlint规范：
		javascript Standard Style(https://standardjs.com/)
			eslint-config-standard
			eslint-plugin-promise
			eslint-plugin-standard
			eslint-plugin-import
			eslint-plugin-node
	
	eslint-loader
		options.failOnWarning
		options.failOnError
		options.formatter
		options.outputReport
	
	devServer.overlay
		
	================================================
	使用：	
		安装：
			cnpm install eslint eslint-loader eslint-plugin-html eslint-friendly-formatter --save-dev
	
		配置：webpack.config.js文件
			{
				test: /\.js$/,
				exclude: /node_modules/,
				use: [
				  {
					  loader:'eslint-loader',
					  options:{
						  formatter:require('eslint-friendly-formatter')
					  }
				  }
				]
			}
			
			devserver: 
				overlay:true
		
		新建"*eslint.js"规范描述文件并安装：
			cnpm install eslint-config-standard eslint-plugin-promise eslint-plugin-node eslint-plugin-import eslint-plugin-standard --save-dev
			
			module.exports = {
				root:true,
				extends:'standard',
				//插件
				plugins:[
					'html'
				],
				//环境
				env:{
					browser:true,
					node:true
				},
				//可以使用的全局变量
				globals:{
					$:true
				},
				//特殊规则定义
				rules:{
					//'indent':['error',4],
					//'eol-last':['error','never'],
				}
			}
			
	================================================		
			
《2》Source Map 便于调试
	从浏览器中进入很快能进到文件对应的位置，比如报错，css定位
	devtool
	webpack.SourceMapToolPlugin
	webpack.EvalSourceMapToolPlugin
	
	devtool介绍：
		开发环境下的值：
			eval
			eval-source-map
			cheap-eval-source-map
			cheap-module-source-map
		生产环境下的值：
			source-map
			hidden-source-map
			nosource-source-map
		
		css使用map时，使用相关loader的map
			css-loader.option.sourcemap
			less-loader.option.sourcemap
			sass-loader.option.sourcemap



--------------
创建一个react项目；可以使用babel处理项目中使用es2015代码；还有react JSX 代码，
  然后使用webpack打包

  创建项目:
  npm install babel-core babel-preset-es2015 babel-preset-react webpack
  webpack-dev-server babel-loader react-hot-loader --save-dev


  npm install react react-dom --save-dev

  配置文件:{test:/\.js$/,exclude:/node_modules/,loader:'react-hot!babel'}

  .babelrc文件

  {
  "presets":["es2015","react"]
  }

  entry.js
  import React from './react';
  import ReactDOM from './react-dom';
  import Name from './name';

  ReactDOM.render(
  <Name />;
  document.getElementById('app')
  )

  package.json 文件：scripts下添加
  "watch":"webpack-dev-server --inline --hot"

  运行：
  npm run watch



resolve/resolveLoader
Webpack 的配置提供了 resolve 和 resolveLoader 参数来设置模块解析的处理细节，resolve
用来配置应用层的模块（要被打包的模块）解析，resolveLoader 用来配置 loader 模块的解析。
当引入通过 npm 安装的 node.js 模块时，可能出现找不到依赖的错误。
Node.js 模块的依赖解析算法很简单，是通过查看模块的每一层父目录中的 node_modules 文件夹来查询依赖的。
当出现 Node.js 模块依赖查找失败的时候，可以尝试设置 resolve.fallback 和 resolveLoader.fallback 来解决问题。
module.exports = {
resolve: { fallback: path.join(__dirname, "node_modules") },
resolveLoader: { fallback: path.join(__dirname, "node_modules") }
};
Webpack 中涉及路径配置最好使用绝对路径，建议通过 path.resolve(__dirname, "app/folder") 或
path.join(__dirname, "app", "folder") 的方式来配置，以兼容 Windows 环境。


一些小的优化点
	resolve.extensions：用来表明文件后缀列表，默认查找顺序是 ['.js', '.json']，如果你的导入文件没有添加后缀就会按照这个顺序查找文件。我们应该尽可能减少后缀列表长度，然后将出现频率高的后缀排在前面
	resolve.alias：可以通过别名的方式来映射一个路径，能让 Webpack 更快找到路径
	module.noParse：如果你确定一个文件下没有其他依赖，就可以使用该属性让 Webpack 不扫描该文件，这种方式对于大型的类库很有帮助